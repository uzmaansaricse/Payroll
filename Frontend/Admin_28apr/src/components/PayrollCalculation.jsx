import React, { useState } from 'react';
import { PDFDownloadLink, Document, Page, Text, View, StyleSheet } from '@react-pdf/renderer';

const PayrollCalculation = () => {
    const [employees] = useState([
        { id: 'E001', name: 'John Doe', ctcTemplate: 'Standard Executive' },
        { id: 'E002', name: 'Jane Smith', ctcTemplate: 'Sales Team Template' },
    ]);

    const [ctcTemplates] = useState([
        {
            name: 'Standard Executive',
            components: [
                { componentName: 'Basic', monthlyValue: 25000, taxable: true, includedInPayslip: true },
                { componentName: 'HRA', monthlyValue: 10000, taxable: true, includedInPayslip: true },
                { componentName: 'Bonus', monthlyValue: 5000, taxable: true, includedInPayslip: true },
                { componentName: 'PF Deduction', monthlyValue: -1800, taxable: false, includedInPayslip: true },
            ],
        },
        {
            name: 'Sales Team Template',
            components: [
                { componentName: 'Basic', monthlyValue: 30000, taxable: true, includedInPayslip: true },
                { componentName: 'HRA', monthlyValue: 12000, taxable: true, includedInPayslip: true },
                { componentName: 'Car Perk', monthlyValue: 3000, taxable: true, includedInPayslip: true },
                { componentName: 'PF Deduction', monthlyValue: -2000, taxable: false, includedInPayslip: true },
            ],
        },
    ]);

    const [selectedEmployee, setSelectedEmployee] = useState('');
    const [payrollData, setPayrollData] = useState({});

    const calculatePayroll = (employeeId) => {
        const employee = employees.find(emp => emp.id === employeeId);
        const selectedTemplate = ctcTemplates.find(t => t.name === employee.ctcTemplate);

        let grossSalary = 0;
        let deductions = 0;

        selectedTemplate.components.forEach(component => {
            if (component.taxable) grossSalary += component.monthlyValue;
            else deductions += component.monthlyValue;
        });

        const netSalary = grossSalary + deductions;

        setPayrollData({
            employeeName: employee.name,
            grossSalary,
            deductions,
            netSalary,
            ctcTemplate: employee.ctcTemplate,
        });
    };

    const Payslip = ({ payrollData }) => {
        const { employeeName, grossSalary, deductions, netSalary, ctcTemplate } = payrollData;
        return (
            <Document>
                <Page style={pdfStyles.page}>
                    <View style={pdfStyles.section}>
                        <Text style={pdfStyles.title}>Payslip</Text>
                        <Text style={pdfStyles.detail}>Employee: {employeeName}</Text>
                        <Text style={pdfStyles.detail}>CTC Template: {ctcTemplate}</Text>
                        <Text style={pdfStyles.detail}>Gross Salary: ₹{grossSalary}</Text>
                        <Text style={pdfStyles.detail}>Deductions: ₹{deductions}</Text>
                        <Text style={pdfStyles.detail}>Net Salary: ₹{netSalary}</Text>
                        <Text style={pdfStyles.footer}>Generated by: Payroll System</Text>
                    </View>
                </Page>
            </Document>
        );
    };

    const pdfStyles = StyleSheet.create({
        page: { backgroundColor: '#f5f5f5', padding: 30 },
        section: { marginBottom: 10 },
        title: { fontSize: 20, fontWeight: 'bold', marginBottom: 10 },
        detail: { fontSize: 14, marginBottom: 5 },
        footer: { marginTop: 20, fontSize: 10, textAlign: 'center' },
    });

    return (
        <div className="p-6 space-y-6 bg-gray-50 min-h-screen">
            <h2 className="text-2xl font-bold text-gray-800">Payroll Calculation</h2>

            <div className="space-y-4">
                <label className="block text-sm font-medium text-gray-700">Select Employee:</label>
                <select
                    value={selectedEmployee}
                    onChange={(e) => setSelectedEmployee(e.target.value)}
                    className="w-full max-w-xs p-2 border border-gray-300 rounded"
                >
                    <option value="">-- Select --</option>
                    {employees.map((employee) => (
                        <option key={employee.id} value={employee.id}>
                            {employee.name}
                        </option>
                    ))}
                </select>
                <button
                    onClick={() => calculatePayroll(selectedEmployee)}
                    className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                >
                    Calculate Payroll
                </button>
            </div>

            {payrollData.employeeName && (
                <div className="mt-6 space-y-4">
                    <h3 className="text-xl font-semibold text-gray-700">Payroll for {payrollData.employeeName}</h3>
                    <div className="overflow-x-auto">
                        <table className="min-w-full border border-gray-300 rounded-lg shadow-sm">
                            <thead className="bg-gray-200">
                                <tr>
                                    <th className="px-4 py-2 text-left">Component</th>
                                    <th className="px-4 py-2 text-right">Monthly</th>
                                    <th className="px-4 py-2 text-right">Annual</th>
                                </tr>
                            </thead>
                            <tbody>
                                {ctcTemplates
                                    .find(t => t.name === payrollData.ctcTemplate)
                                    .components.map((component, index) => (
                                        <tr key={index} className="border-t">
                                            <td className="px-4 py-2">{component.componentName}</td>
                                            <td className="px-4 py-2 text-right">₹{component.monthlyValue}</td>
                                            <td className="px-4 py-2 text-right">₹{component.monthlyValue * 12}</td>
                                        </tr>
                                    ))}
                                <tr className="font-semibold border-t bg-gray-50">
                                    <td className="px-4 py-2">Gross Salary</td>
                                    <td className="px-4 py-2 text-right">₹{payrollData.grossSalary}</td>
                                    <td className="px-4 py-2 text-right">₹{payrollData.grossSalary * 12}</td>
                                </tr>
                                <tr className="font-semibold border-t bg-gray-50">
                                    <td className="px-4 py-2">Deductions</td>
                                    <td className="px-4 py-2 text-right">₹{payrollData.deductions}</td>
                                    <td className="px-4 py-2 text-right">₹{payrollData.deductions * 12}</td>
                                </tr>
                                <tr className="font-bold border-t bg-green-50">
                                    <td className="px-4 py-2">Net Salary</td>
                                    <td className="px-4 py-2 text-right">₹{payrollData.netSalary}</td>
                                    <td className="px-4 py-2 text-right">₹{payrollData.netSalary * 12}</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <PDFDownloadLink
                        document={<Payslip payrollData={payrollData} />}
                        fileName={`payslip_${payrollData.employeeName}.pdf`}
                        className="inline-block mt-4 px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
                    >
                        {({ loading }) => (loading ? 'Generating Payslip...' : 'Download Payslip')}
                    </PDFDownloadLink>
                </div>
            )}
        </div>
    );
};

export default PayrollCalculation;
